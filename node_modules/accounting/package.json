{
  "name": "accounting",
  "description": "number, money and currency formatting library",
  "homepage": "http://openexchangerates.github.io/accounting.js",
  "keywords": [
    "accounting",
    "number",
    "money",
    "currency",
    "format",
    "utilities",
    "finance",
    "exchange"
  ],
  "author": {
    "name": "Open Exchange Rates",
    "email": "info@openexchangerates.org",
    "url": "https://www.openexchangerates.org"
  },
  "contributors": [
    {
      "name": "Open Exchange Rates",
      "email": "info@openxchangerates.org",
      "url": "https://openexchangerates.org"
    },
    {
      "name": "Joss Crowcroft",
      "email": "josscrowcroft@gmail.com",
      "url": "http://www.josscrowcroft.com"
    }
  ],
  "dependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/openexchangerates/accounting.js.git"
  },
  "main": "accounting.js",
  "version": "0.4.1",
  "readme": "**accounting.js** is a tiny JavaScript library for number, money and currency parsing/formatting. It's lightweight, fully localisable, has no dependencies, and works great client-side or server-side. Use standalone or as a nodeJS/npm and AMD/requireJS module.\n\nVisit the plugin homepage for demos and documentation: **http://openexchangerates.github.io/accounting.js/**\n\nPlease checkout or download the latest stable tag before using in production. [Bug reports](https://github.com/openexchangerates/accounting.js/issues) and pull requests are welcome.\n\nMaintained by [Open Exchange Rates](https://openexchangerates.org \"Free reliable exchange rates/currency conversion data API\") and originally by [@josscrowcroft](http://twitter.com/josscrowcroft) and other [contributors](https://github.com/openexchangerates/accounting.js/contributors).\n\n---\n\n### Works great with:\n\n* **[money.js](http://openexchangerates.github.com/money.js \"JavaScript and NodeJS Currency Conversion Library\")** - a tiny (1kb) standalone JavaScript currency conversion library, for web & nodeJS\n* **[Open Exchange Rates](https://openexchangerates.org \"realtime and historical exchange rates/currency conversion data API\")** - the free currency conversion data API\n\n---\n\n## Changelog\n\n**v0.4.1** - Alias `accounting.formatNumber()` as `accounting.format()`\n\n**v0.4** - Transferred repository to Open Exchange Rates for ongoing maintenance\n\n**v0.3.2** - Fixed package.json dependencies (should be empty object)\n\n**v0.3.0**\n* Rewrote library structure similar to underscore.js for use as a nodeJS/npm and AMD module. Use `npm install accounting` and then `var accounting = require(\"accounting\");` in your nodeJS scripts. \n* Also works with requireJS or any AMD module loader.\n* **unformat** now only attempts to parse the number if it's not already a valid number. \n* `acounting.unformat` now also aliased as `acounting.parse`\n* Fixed an IE bug in the `defaults` method\n\n**v0.2.2** - Fixed same issue as \\#Num: #24 in **formatNumber**; switch to Google Closure Compiler for minified version.\n\n**v0.2.1** - Fixed issue \\#Num: #24 (locally-defined settings object was being modified by **formatMoney**)\n\n**v0.2**\n* Rewrote formatting system for **formatMoney** and **formatColumn** for better control of string output\n* Now supports separate formats for negative and zero values (optionally) via `accounting.settings.currency.format`\n* Internal improvements and helper methods\n\n**v0.1.4**\n* **formatMoney** recursively formats arrays\n* Added Jasmine test suite (thanks to [millermedeiros](https://github.com/millermedeiros)) and QUnit functionality/speed tests\n\n**v0.1.3**\n* Added configurable settings object for default formatting parameters.\n* Added `format` parameter to control symbol and value position (default `\"%s%v\"`, or [symbol][value])\n* Methods consistently accept object as 2nd parameter, matching/overriding the library defaults\n\n**v0.1.2**\n* **formatColumn** works recursively on nested arrays (e.g. `accounting.formatColumn( [[1,12,123,1234], [1234,123,12,1]] )`, returns matching array with inner columns lined up)\n* Fix rounding in **formatNumber**\n\n**v0.1.1**\n* Added **toFixed** method (`accounting.toFixed(value, precision)`), which treats floats more like decimals for more accurate currency rounding\n* Minified version preserves semicolons\n* Fixed `NaN` errors when no value in **unformat**\n\n**v0.1** - First version\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/openexchangerates/accounting.js/issues"
  },
  "_id": "accounting@0.4.1",
  "_from": "accounting@"
}
